package telegram

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"
	"wedding_website/internal/app/models"
)

type TelegramService struct {
	botToken string
	chatID   string
	myLogger slog.Logger
}

func NewTelegramService(botToken, chatID string, myLogger *slog.Logger) *TelegramService {
	return &TelegramService{
		botToken: botToken,
		chatID:   chatID,
		myLogger: *myLogger,
	}
}

type Message struct {
	ChatID    string `json:"chat_id"`
	Text      string `json:"text"`
	ParseMode string `json:"parse_mode,omitempty"`
}

func (s *TelegramService) SendMessage(text string) error {
	s.myLogger.Info("–ù–∞—á–∞–ª–æ SendMessage —Å —Ç–µ–∫—Å—Ç–æ–º", slog.String("text", text))

	message := Message{
		ChatID:    s.chatID,
		Text:      text,
		ParseMode: "Markdown",
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		s.myLogger.Error("–û—à–∏–±–∫–∞ Marshal", slog.String("error", err.Error()))
		return err
	}

	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", s.botToken)

	s.myLogger.Info("–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", slog.String("url", url))

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		s.myLogger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", slog.String("error", err.Error()))
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		s.myLogger.Error("–ù–µ –≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥", slog.Int("Code", resp.StatusCode))
		return fmt.Errorf("telegram API error: %s", resp.Status)
	}

	return nil
}

func (s *TelegramService) SendRSVPNotification(rsvp *models.RSVP) error {
	attendance := "‚ùå *–ù–µ –ø—Ä–∏–¥–µ—Ç*"
	if rsvp.Attendance {
		attendance = "‚úÖ *–ü—Ä–∏–¥–µ—Ç*"
	}

	emoji := "üéâ"
	if !rsvp.Attendance {
		emoji = "üò¢"
	}

	companionInfo := "–û–¥–∏–Ω/–æ–¥–Ω–∞"
	if rsvp.Companion != "" {
		companionInfo = fmt.Sprintf("–° —Å–ø—É—Ç–Ω–∏–∫–∞–º–∏: *%s*", rsvp.Companion)
	}

	message := fmt.Sprintf(
		"%s *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!* %s\n\n"+
			"üë§ *–ò–º—è:* %s\n"+
			"üìã *–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:* %s\n"+
			"üë• *–ö–æ–º–ø–∞–Ω–∏—è:* %s\n"+
			"üïê *–í—Ä–µ–º—è:* %s",
		emoji, emoji,
		rsvp.Name,
		attendance,
		companionInfo,
		rsvp.CreatedAt.Format("02.01.2006 15:04"),
	)

	return s.SendMessage(message)
}
